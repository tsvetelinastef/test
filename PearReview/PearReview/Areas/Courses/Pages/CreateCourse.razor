@page "/Courses/Create"
@attribute [Authorize(Roles = "Admin,Teacher")]

@using PearReview.Areas.Courses.Data;
@using PearReview.Areas.Courses.Services;

@inject CurrentUserService CurrentUserSvc
@inject CoursesService CoursesSvc

@*<RoleRedirect RequiredRole="@UserRole.Teacher" />*@

<h3>Create a Course</h3>

@if (isDone && isSuccess)
{
    <div class="callout">
        ✔ Course created successfully!
    </div>
}
else if (isDone && !isSuccess)
{
    <div class="callout callout-danger">
            ❌ Course creation failed!
    </div>
}

<EditForm Model="@course" OnValidSubmit="@HandleValidSubmit">
	<DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3 row">
        <label for="Name" class="col-sm-2 col-form-label">Name *</label>
        <div class="col-sm-10">
            <InputText id="Name" @bind-Value="course.Name" class="form-control"/>
        </div>
        <ValidationMessage For="() => course.Name" />
    </div>
    <div class="mb-3 row">
        <label for="description" class="col-sm-2 col-form-label">Description</label>
        <div class="col-sm-10">
            <InputTextArea id="description" @bind-Value="course.Description" class="form-control"/>
        </div>
        <ValidationMessage For="() => course.Description" />
    </div>

    <div class="mb-3 row">
        <label for="start-date" class="col-sm-2 col-form-label">Start Date</label>
        <div class="col-sm-10">
            <InputDate  id="start-date" @bind-Value="course.StartDate" class="form-control"/>
        </div>
        <ValidationMessage For="() => course.StartDate" />
    </div>

    <button type="submit">Create</button>
</EditForm>

@code {
    private Course course = new Course();
    private AppUser currentUser;

    private bool isProcessing = false;
    private bool isDone = false;
    private bool isSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        currentUser = (await CurrentUserSvc.GetCurrentUser())!;

        course.TeacherId = currentUser.Id;

        await base.OnInitializedAsync();
    }

    private async Task HandleValidSubmit()
    {
        course.CreatedOn = DateTime.Now;

        isProcessing = true;
        int result = await CoursesSvc.AddCourse(course);
        isProcessing = false;
        isDone = true;

        if (result == 1)
        {
            isSuccess = true;
        }
    }
}
